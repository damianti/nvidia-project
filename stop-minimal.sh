#!/bin/bash

# Script para detener y limpiar la configuraci√≥n minimalista
# NVIDIA ScaleUp Hackathon Project

echo "üõë Deteniendo configuraci√≥n minimalista: Team 1 UI + Team 3 Orchestrator"
echo "=================================================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes con colores
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para detener servicios
stop_services() {
    print_status "Deteniendo servicios..."
    
    if [ -f "docker-compose-minimal.yml" ]; then
        docker-compose -f docker-compose-minimal.yml down
        print_success "Servicios detenidos"
    else
        print_warning "Archivo docker-compose-minimal.yml no encontrado"
    fi
}

# Funci√≥n para limpiar contenedores
cleanup_containers() {
    print_status "Limpiando contenedores..."
    
    # Detener contenedores de nvidia si est√°n corriendo
    local containers=$(docker ps --filter "name=nvidia-" --format "{{.Names}}")
    
    if [ -n "$containers" ]; then
        echo "$containers" | xargs docker stop
        print_success "Contenedores detenidos"
    else
        print_status "No hay contenedores de nvidia corriendo"
    fi
    
    # Eliminar contenedores de nvidia
    local containers=$(docker ps -a --filter "name=nvidia-" --format "{{.Names}}")
    
    if [ -n "$containers" ]; then
        echo "$containers" | xargs docker rm
        print_success "Contenedores eliminados"
    else
        print_status "No hay contenedores de nvidia para eliminar"
    fi
}

# Funci√≥n para limpiar vol√∫menes (opcional)
cleanup_volumes() {
    read -p "¬øDeseas eliminar tambi√©n los vol√∫menes de datos? (Esto borrar√° la base de datos) (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "Eliminando vol√∫menes..."
        
        # Eliminar vol√∫menes espec√≠ficos
        docker volume rm nvidia-project_postgres_data 2>/dev/null || true
        docker volume rm nvidia-project_redis_data 2>/dev/null || true
        
        # Eliminar vol√∫menes hu√©rfanos
        docker volume prune -f
        
        print_success "Vol√∫menes eliminados"
    else
        print_status "Vol√∫menes preservados"
    fi
}

# Funci√≥n para limpiar im√°genes (opcional)
cleanup_images() {
    read -p "¬øDeseas eliminar tambi√©n las im√°genes de Docker? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "Eliminando im√°genes..."
        
        # Eliminar im√°genes de nvidia
        docker images --filter "reference=nvidia*" --format "{{.ID}}" | xargs docker rmi 2>/dev/null || true
        
        # Eliminar im√°genes hu√©rfanas
        docker image prune -f
        
        print_success "Im√°genes eliminadas"
    else
        print_status "Im√°genes preservadas"
    fi
}

# Funci√≥n para limpiar redes (opcional)
cleanup_networks() {
    read -p "¬øDeseas eliminar tambi√©n las redes de Docker? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "Eliminando redes..."
        
        # Eliminar red de nvidia
        docker network rm nvidia-project_nvidia-minimal-network 2>/dev/null || true
        
        # Eliminar redes hu√©rfanas
        docker network prune -f
        
        print_success "Redes eliminadas"
    else
        print_status "Redes preservadas"
    fi
}

# Funci√≥n para mostrar estado final
show_final_status() {
    print_status "Estado final del sistema:"
    echo ""
    
    echo "=== Contenedores corriendo ==="
    docker ps --filter "name=nvidia-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    echo ""
    
    echo "=== Contenedores detenidos ==="
    docker ps -a --filter "name=nvidia-" --format "table {{.Names}}\t{{.Status}}"
    echo ""
    
    echo "=== Vol√∫menes ==="
    docker volume ls --filter "name=nvidia"
    echo ""
    
    echo "=== Redes ==="
    docker network ls --filter "name=nvidia"
    echo ""
}

# Funci√≥n principal
main() {
    echo "üîç Verificando estado actual..."
    
    # Mostrar estado inicial
    print_status "Estado inicial:"
    docker ps --filter "name=nvidia-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || print_status "No hay contenedores corriendo"
    echo ""
    
    # Detener servicios
    stop_services
    
    # Limpiar contenedores
    cleanup_containers
    
    # Preguntar por limpieza adicional
    echo ""
    print_status "Opciones de limpieza adicional:"
    echo "1. Eliminar vol√∫menes (borra datos de la base de datos)"
    echo "2. Eliminar im√°genes de Docker"
    echo "3. Eliminar redes de Docker"
    echo "4. Limpieza completa (todo lo anterior)"
    echo "5. Solo detener servicios (preservar todo)"
    echo ""
    
    read -p "Selecciona una opci√≥n (1-5): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            cleanup_volumes
            ;;
        2)
            cleanup_images
            ;;
        3)
            cleanup_networks
            ;;
        4)
            cleanup_volumes
            cleanup_images
            cleanup_networks
            ;;
        5)
            print_status "Solo deteniendo servicios"
            ;;
        *)
            print_status "Opci√≥n no v√°lida, solo deteniendo servicios"
            ;;
    esac
    
    # Mostrar estado final
    show_final_status
    
    print_success "‚úÖ Limpieza completada!"
    print_status "Para reiniciar, ejecuta: ./start-minimal.sh"
}

# Ejecutar funci√≥n principal
main "$@"
