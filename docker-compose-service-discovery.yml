version: '3.8'

services:
  # Redis for Service Discovery and Message Queue
  redis:
    image: redis:7-alpine
    container_name: nvidia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - nvidia-network
    restart: unless-stopped

  # PostgreSQL for Orchestrator
  postgres-orchestrator:
    image: postgres:15-alpine
    container_name: nvidia-postgres-orchestrator
    environment:
      POSTGRES_DB: nvidia_orchestrator
      POSTGRES_USER: nvidia_user
      POSTGRES_PASSWORD: nvidia_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_orchestrator_data:/var/lib/postgresql/data
      - ./init-orchestrator-db.py:/docker-entrypoint-initdb.d/init-orchestrator-db.py
    networks:
      - nvidia-network
    restart: unless-stopped

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: nvidia-adminer
    ports:
      - "8083:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres-orchestrator
    networks:
      - nvidia-network
    restart: unless-stopped

  # Load Balancer with Service Discovery
  team2-load-balancer:
    build:
      context: ./teams/team2-load-balancer
      dockerfile: Dockerfile
    container_name: nvidia-load-balancer
    ports:
      - "3002:3002"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HOST=0.0.0.0
      - PORT=3002
    depends_on:
      - redis
    networks:
      - nvidia-network
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Orchestrator with Service Discovery and Message Queue
  team3-orchestrator:
    build:
      context: ./teams/team3-orchestrator
      dockerfile: Dockerfile
    container_name: nvidia-orchestrator
    ports:
      - "3003:3003"
    environment:
      - DATABASE_URL=postgresql://nvidia_user:nvidia_password@postgres-orchestrator:5432/nvidia_orchestrator
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HOST=0.0.0.0
      - PORT=3003
    depends_on:
      - postgres-orchestrator
      - redis
    networks:
      - nvidia-network
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root

  # UI (optional - for testing)
  team1-ui:
    build:
      context: ./teams/team1-ui
      dockerfile: Dockerfile
    container_name: nvidia-ui
    ports:
      - "3001:3001"
    environment:
      - ORCHESTRATOR_URL=http://team3-orchestrator:3003
      - LOAD_BALANCER_URL=http://team2-load-balancer:3002
    depends_on:
      - team3-orchestrator
      - team2-load-balancer
    networks:
      - nvidia-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_orchestrator_data:

networks:
  nvidia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16
