version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: nvidia-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nvidia_user -d nvidia_cloud"]
      interval: 30s
      timeout: 10s
      retries: 3

  docker-dind:
    image: docker:24-dind
    container_name: nvidia-docker-dind
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR=  # TODO change this in advanced steps of develop
    volumes:
      - dind-storage:/var/lib/docker
    networks:
      - nvidia-network
    command: ["--storage-driver=overlay2", "--tls=false"]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - nvidia-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
    - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - nvidia-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - nvidia-network
  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: nvidia-orchestrator
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - DOCKER_HOST=tcp://docker-dind:2375
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKER_URL}
      - KAFKA_PRODUCER_TOPIC=container-lifecycle
      - DOCKER_NETWORK=${DOCKER_NETWORK:-nvidia-project_nvidia-network}
    depends_on:
      postgres:
        condition: service_healthy
      docker-dind:
        condition: service_started
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3      

  ui:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
    container_name: nvidia-ui
    environment:
      - API_GATEWAY_EXTERNAL_URL=http://api-gateway:8080
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL}
      - NODE_ENV=${NODE_ENV}
    ports:
      - "${UI_EXTERNAL_PORT}:${UI_PORT}"
    depends_on:
      - orchestrator
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: nvidia-api-gateway
    environment:
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL}
      - LOAD_BALANCER_URL=${LOAD_BALANCER_URL}
      - PORT=${API_GATEWAY_PORT}
      - TARGET_HOST=docker-dind
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    depends_on:
      - orchestrator
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

  load-balancer:
    build:
      context: ./services/load-balancer
      dockerfile: Dockerfile
    container_name: nvidia-load-balancer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKER_URL}
      - KAFKA_CONSUMER_GROUP=${KAFKA_CONSUMER_GROUP}
      - TARGET_HOST=docker-dind
      - PORT=3004
    depends_on:
      - kafka
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  postgres_data:
  orchestrator_builds:
  dind-storage:  
  
  

networks:
  nvidia-network:
    driver: bridge 