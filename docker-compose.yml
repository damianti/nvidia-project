version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: nvidia-postgres
    environment:
      POSTGRES_DB: nvidia_cloud
      POSTGRES_USER: nvidia_user
      POSTGRES_PASSWORD: nvidia_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nvidia_user -d nvidia_cloud"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: nvidia-redis
    ports:
      - "6379:6379"
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orchestrator Service (Team 3)
  orchestrator:
    build:
      context: ./teams/team3-orchestrator
      dockerfile: Dockerfile
    container_name: nvidia-orchestrator
    environment:
      - DATABASE_URL=postgresql://nvidia_user:nvidia_password@postgres:5432/nvidia_cloud
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nvidia-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer Service (Team 2)
  load-balancer:
    build:
      context: ./teams/team2-load-balancer
      dockerfile: Dockerfile
    container_name: nvidia-load-balancer
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - UI_URL=http://ui:3002
      - BILLING_URL=http://billing:8001
      - WORKLOAD_URL=http://workload:8002
    ports:
      - "8080:8080"
    depends_on:
      - orchestrator
      - ui
      - billing
      - workload
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # UI Service (Team 1)
  ui:
    build:
      context: ./teams/team1-ui
      dockerfile: Dockerfile
    container_name: nvidia-ui
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - NODE_ENV=production
    ports:
      - "3002:3002"
    depends_on:
      - orchestrator
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Billing Service (Team 4) - Mock for now
  billing:
    image: mockserver/mockserver:latest
    container_name: nvidia-billing
    environment:
      - MOCKSERVER_PROPERTY_FILE=/config/mock-billing.properties
    ports:
      - "8001:1080"
    volumes:
      - ./teams/team4-billing/mock-config:/config
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workload Generator (Team 5) - Mock for now
  workload:
    image: mockserver/mockserver:latest
    container_name: nvidia-workload
    environment:
      - MOCKSERVER_PROPERTY_FILE=/config/mock-workload.properties
    ports:
      - "8002:1080"
    volumes:
      - ./teams/team5-workload/mock-config:/config
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Discovery (Team 6) - Mock for now
  service-discovery:
    image: mockserver/mockserver:latest
    container_name: nvidia-service-discovery
    environment:
      - MOCKSERVER_PROPERTY_FILE=/config/mock-discovery.properties
    ports:
      - "8003:1080"
    volumes:
      - ./teams/team6-service-discovery/mock-config:/config
    networks:
      - nvidia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nvidia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nvidia-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: nvidia-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - nvidia-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  nvidia-network:
    driver: bridge 